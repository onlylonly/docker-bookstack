name: "master"

on:
  push:
    branches:
      - master

jobs:
  build:
    runs-on: ubuntu-latest
    outputs:
      git_sha_short: ${{ steps.vars.outputs.sha_short }}
    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Set vars
      id: vars
      run: echo "sha_short=$(git rev-parse --short HEAD)" >> $GITHUB_OUTPUT

    - name: Set up CI Image Metadata (for OCI and E2E image)
      id: docker_meta_ci
      uses: docker/metadata-action@v5
      with:
        images: onlylonly/bookstack-dev
        tags: |
          type=sha # Results in onlylonly/bookstack-dev:sha-<shortsha>
          type=raw,value=e2e-${{ steps.vars.outputs.sha_short }} # Tag for the E2E image

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    # Build 1: Multi-platform image, output as OCI tarball artifact
    - name: Build multi-platform image (OCI artifact)
      uses: docker/build-push-action@v6
      with:
        context: .
        file: ./Dockerfile
        platforms: linux/amd64,linux/arm64
        push: false
        tags: onlylonly/bookstack-dev:sha-${{ steps.vars.outputs.sha_short }} # Main tag for this build
        labels: ${{ steps.docker_meta_ci.outputs.labels }}
        cache-from: type=registry,ref=onlylonly/bookstack-dev:master
        cache-to: type=registry,ref=onlylonly/bookstack-dev:master,mode=max # Update master cache
        outputs: type=oci,dest=/tmp/image-bookstack-oci.tar

    - name: Upload OCI artifact
      uses: actions/upload-artifact@v4
      with:
        name: image-bookstack-oci-master
        path: /tmp/image-bookstack-oci.tar

    # Build 2: Single-platform image for E2E testing, output as Docker tarball
    - name: Build single-platform image for E2E
      uses: docker/build-push-action@v6
      with:
        context: .
        file: ./Dockerfile
        platforms: linux/amd64 # Assuming E2E runner is amd64
        push: false
        tags: onlylonly/bookstack-dev:e2e-${{ steps.vars.outputs.sha_short }} # Use the specific E2E tag
        labels: ${{ steps.docker_meta_ci.outputs.labels }}
        cache-from: type=registry,ref=onlylonly/bookstack-dev:master
        # No cache-to here, as the primary master cache is updated by the OCI build
        outputs: type=docker,dest=/tmp/image-bookstack-e2e.tar

    - name: Upload E2E artifact
      uses: actions/upload-artifact@v4
      with:
        name: image-bookstack-e2e-master
        path: /tmp/image-bookstack-e2e.tar

  e2e:
    runs-on: ubuntu-latest
    needs: build
    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Download E2E artifact
      uses: actions/download-artifact@v4
      with:
        name: image-bookstack-e2e-master # Download the E2E-specific artifact
        path: /tmp

    - name: Load Docker image for E2E
      run: |
        docker load --input /tmp/image-bookstack-e2e.tar
        docker image ls -a # You should see onlylonly/bookstack-dev:e2e-... here
    # Add your E2E test steps here, they would use the loaded image, e.g.,
    # docker run onlylonly/bookstack-dev:e2e-${{ needs.build.outputs.git_sha_short }} some-test-command

  push:
    runs-on: ubuntu-latest # Changed from ubuntu-24.04 for consistency
    needs: [build, e2e] # Depends on both build and e2e
    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Set up Docker Image Metadata (for Master Push)
      id: docker_meta_push
      uses: docker/metadata-action@v5
      with:
        images: |
          onlylonly/bookstack
          ghcr.io/onlylonly/docker-bookstack
        tags: |
          # Get "master" for master-branch changes
          type=ref,event=branch
        # Add any common labels for your pushed images
        # labels: |
        #   org.opencontainers.image.source=${{ github.server_url }}/${{ github.repository }}

    # The artifact download and docker load steps are removed from here,
    # as this job rebuilds the image.

    - name: Set up QEMU
      uses: docker/setup-qemu-action@v3

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Login to DockerHub
      # Only push if it's a direct push to master, not a PR event (though PRs don't trigger this workflow by default)
      if: github.event_name == 'push' && github.ref == 'refs/heads/master'
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}

    - name: Login to GitHub Container Registry
      if: github.event_name == 'push' && github.ref == 'refs/heads/master'
      uses: docker/login-action@v3
      with:
        registry: ghcr.io
        username: ${{ github.repository_owner }}
        password: ${{ secrets.CR_PAT }}

    - name: Build and Push Master Image
      if: github.event_name == 'push' && github.ref == 'refs/heads/master'
      uses: docker/build-push-action@v6
      with:
        context: .
        file: ./Dockerfile
        platforms: linux/amd64,linux/arm64
        push: true
        tags: ${{ steps.docker_meta_push.outputs.tags }}
        labels: ${{ steps.docker_meta_push.outputs.labels }}
        # Use the master cache populated by the 'build' job
        cache-from: type=registry,ref=onlylonly/bookstack-dev:master
        # Also update the master cache with this build's layers
        cache-to: type=registry,ref=onlylonly/bookstack-dev:master,mode=max
